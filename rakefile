require "bundler"
Bundler.require

require 'sass'
require 'bourbon'

desc "rebuild css files"
task :css do 
  Dir.glob("**/s{a,c}ss") { |d| Sass.load_paths << d }

  Dir.glob("**/s{a,c}ss") do |d|
    Dir.glob("#{d}/*.s[ac]ss").reject {|x| File.basename(x).start_with?"_"}.each do |sass|
      cssfile = "#{d}/../#{File.basename(sass,".*")}.min.css"
      puts sass
      Sass.compile_file sass, cssfile, {style: :compressed }
    end
  end
end

desc "rebuild js files"
task :js do
  Dir.glob("**/[sS]cripts").each do |d|
    Dir.glob("#{d}/**/*.slicer") do |slicer|
      sh "echo #{slicer}"
      #sh "node calfslicer.js #{slicer} ./#{d} #{d}/#{File.basename(slicer, ".*")}.js"
      `sh ./calfslicer #{d} #{slicer} #{d}/#{File.basename(slicer,".*")}.js`
    end
  end
end


desc "compile require modules"
task :rjs do
  class RequireModules
    def initialize
      @files = Dir.glob("**/[sS]cripts/modules/**/main.js")
    end

    def modules
      @files.map do |f|
        "#{File.dirname(f).gsub(/.*modules\//,"")}/#{File.basename(f,".js")}"
      end
    end

    def baseUrl
      File.dirname(@files[0]).gsub(/modules\/.*/,"modules")
    end


    def template
      erb_template = %{
                       var config =  {
                          name:"marker",
                          include: <%= modules %>,
                          exclude: ["socket"],
                          baseUrl: "<%= baseUrl %>",
                          out : "<%= baseUrl %>/huboard.allmodules.js"
                        }
                      console.log("config",config)
                      var requirejs = require("requirejs")

                      console.log("config",requirejs)
                      requirejs.optimize(config, function(contents){
                        console.log(contents);
                      }, function(err) {
 console.log(err)
});
      }
      erb = ERB.new erb_template
      erb.result binding
    end
  end
  modules = RequireModules.new
  config = modules.template
  File.open("app.build.js","wb") { |f|
    f.write config
  }
  sh "node app.build.js"

end

require "guard/sprockets2"
desc "precomile assets"
namespace :assets do 
  task :precompile do
    class HuboardAssets < Sprockets::Environment
      if File.exists? ".settings"
        load ".settings"
      elsif ENV['STRIPE_API']
        set :stripe_key, ENV['STRIPE_API']
        set :stripe_publishable_key, ENV['STRIPE_PUBLISHABLE_API']
      else
        raise "Configuration information not found: you need to provide a .settings file or ENV variables"
      end
    end

    environment = HuboardAssets.new
    environment.append_path 'assets/javascripts'
    environment.append_path 'assets/stylesheets'
    environment.append_path 'assets/images'

    environment.js_compressor = :uglify
    environment.css_compressor = :yui

    Compass.sass_engine_options[:load_paths].each { |d| environment.append_path d.to_s }
    compiler = Guard::Sprockets2::Compiler.new sprockets: environment, precompile:[ /\w+\.(?!js|css).+/, /application.(css|js)$/, /ember-accounts.(css|js)$/ ]

    compiler.clean
    compiler.compile
  end
end


namespace :couch do 
  desc "push development documents"
  task "dev:push" do
    Dir.chdir "couch" do
      `couch-docs push http://127.0.0.1:5984/huboard -d`
    end
  end
end
